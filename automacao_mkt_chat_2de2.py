# -*- coding: utf-8 -*-
"""automacao-mkt-chat-2de2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L_GF99OGbUKRpZVU6XPgwa0EBV4Z41Ke
"""

import pandas as pd
import datetime

caminho_do_arquivo = "https://raw.githubusercontent.com/Russel-Servicos/automacao-mkt-chat/main/planilha_chat_estagio_1de2_exemplo.csv"

df = pd.read_csv(caminho_do_arquivo)

data = "11/09/2024"

# deixar unico os canais, origens, meios e campanhas, fazer o calculo com todos
# usar comprehensive list para preencher o resto das linhas que falta para adicionar na coluna

## Conta quantidade de qualificado, não qualificado e emprego
qty_ids = len(df.index)

qty_qualified = df.query("Qualificação == 'Qualificado'")
qty_qualified = len(qty_qualified.index)
percentage_qualified = qty_qualified / qty_ids
percentage_qualified = "{:.2f}".format(percentage_qualified)
percentage_qualified = float(percentage_qualified)

qty_not_qualified = df.query("Qualificação == 'Não Qualificado'")
qty_not_qualified = len(qty_not_qualified.index)
percentage_not_qualified = qty_not_qualified / qty_ids
percentage_not_qualified = "{:.2f}".format(percentage_not_qualified)
percentage_not_qualified = float(percentage_not_qualified)

qty_emprego = df.query("Qualificação == 'Emprego'")
qty_emprego = len(qty_emprego.index)
percentage_emprego = qty_emprego / qty_ids
percentage_emprego = "{:.2f}".format(percentage_emprego)
percentage_emprego = float(percentage_emprego)

#
unique = pd.unique(df["Campanha"])
unique
# remover nan da list

# pega total de linhas, cria lista de contagem e taxa de conversao com valores e nan, joga na coluna
df.shape

## Contagem e Taxa de Conversão das colunas: Canal, Origem, Meio e Campanha
def generate_data_column_contagem(values, column):
  result_list = []

  for value in values:
    df_filtered = df.query(f"{column} == '{value}'")
    total_rows = len(df_filtered.index)
    df_qualified = df_filtered.query("Qualificação == 'Qualificado'")
    qty_qualified = len(df_qualified.index)
    calculation = f"{value}: {total_rows} - {qty_qualified}"

    if total_rows == 0:
      percentage = 0.0
    else:
      percentage = qty_qualified / total_rows

    if percentage == 0.0:
      percentage = 0
    else:
      percentage = "{:.0%}".format(percentage)

    result_list.append({
        "TaxaConversão": percentage,
        "Calculo": calculation
    })
  return result_list

canais = ["Adwords", "Direct", "Search Engine", "Referrals", "WhatsApp"]
origens = ["google"]
meios = ["display", "pesquisa", "youtube"]
campanhas = ['aeroporto', 'barerestaurante', 'condominio', 'construcao', 'construcaorj', 'estacionamento', 'geral', 'logistica', 'lp-construcao', 'opmaquinas', 'pacotelimpeza', 'pacotelimpezarj', 'saude', 'terceirizacao', 'varejo', 'varejorj', 'ti', 'ygeral', 'yremarketing']

result_canais = generate_data_column_contagem(values=canais, column="Canal")
result_origens = generate_data_column_contagem(values=origens, column="Origem")
result_meios = generate_data_column_contagem(values=meios, column="Meio")
result_campanhas = generate_data_column_contagem(values=campanhas, column="Campanha")

result_campanhas

## Insere valores na coluna Contagem e Taxa de Conversão
all_result_columns = result_canais + [ {} ] + result_origens + [ {} ] + result_meios + [ {} ] + result_campanhas

list_taxa_conversao = []
list_contagem = []

for value in all_result_columns:
  dict_is_empty = len(value.keys()) == 0

  if dict_is_empty:
    list_taxa_conversao.append("")
    list_contagem.append("")
  else:
    list_taxa_conversao.append(value["TaxaConversão"])
    list_contagem.append(value["Calculo"])


# df.iloc[:, "Taxa de Conversão"] = list_taxa_conversao
df
# df.iloc[:, "Contagem"] = list_contagem

df2 = pd.DataFrame([[1, 2], [4, 5], [7, 8], [9, 10], [11, 23]])
df2.iloc[1:5,]
# df2

## Adiciona o valor Chat SalesIQ na coluna Canal
df_salesiq = df.query("Canal in ['Adwords', 'Direct', 'Referrals', 'Search Engine']")
df_salesiq.loc[:, "Canal"] = "Chat SalesIQ"

df_not_salesiq = df.query("Canal not in ['Adwords', 'Direct', 'Referrals', 'Search Engine']")

df_final = pd.concat([df_salesiq, df_not_salesiq])

df_final

## Adiciona valores totais na primeira linha, embaixo da linha das colunas
df_final.loc[-1] = [data, qty_ids, qty_qualified, percentage_qualified, "", "",
              "", "", "", "", "", "", ""]
df_final.index = df_final.index + 1
df_final = df_final.sort_index()

# Exportar como CSV
now = datetime.datetime.now()
now = now.strftime("%Y_%m_%d_%H_%M")
df_final.to_csv(f'./planilha_chat_estagio_2de2_{now}.csv', index=False)